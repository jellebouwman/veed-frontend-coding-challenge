import { z } from "zod";
import { ownerSchema } from "../owner";

// This is huge, but it's just a schema for a GitHub repository object.
// We could also create a schema by picking the fields we need,
// but this is a good example of how to use zod.
export const repositorySchema = z.object({
  id: z.number(),
  allow_forking: z.boolean(),
  archive_url: z.string().url(),
  archived: z.boolean(),
  assignees_url: z.string().url(),
  blobs_url: z.string().url(),
  branches_url: z.string().url(),
  clone_url: z.string().url(),
  collaborators_url: z.string().url(),
  comments_url: z.string().url(),
  commits_url: z.string().url(),
  compare_url: z.string().url(),
  contents_url: z.string().url(),
  contributors_url: z.string().url(),
  created_at: z.string(),
  default_branch: z.string(),
  deployments_url: z.string().url(),
  description: z.string().nullable(),
  disabled: z.boolean(),
  downloads_url: z.string().url(),
  events_url: z.string().url(),
  fork: z.boolean(),
  forks_count: z.number(),
  forks_url: z.string().url(),
  forks: z.number(),
  full_name: z.string(),
  git_commits_url: z.string().url(),
  git_refs_url: z.string().url(),
  git_tags_url: z.string().url(),
  git_url: z.string().url(),
  has_discussions: z.boolean(),
  has_downloads: z.boolean(),
  has_issues: z.boolean(),
  has_pages: z.boolean(),
  has_projects: z.boolean(),
  has_wiki: z.boolean(),
  homepage: z.string().nullable(),
  hooks_url: z.string().url(),
  html_url: z.string().url(),
  is_template: z.boolean(),
  issue_comment_url: z.string().url(),
  issue_events_url: z.string().url(),
  issues_url: z.string().url(),
  keys_url: z.string().url(),
  labels_url: z.string().url(),
  language: z.string().nullable(),
  languages_url: z.string().url(),
  license: z.any().nullable(),
  merges_url: z.string().url(),
  milestones_url: z.string().url(),
  mirror_url: z.string().url().nullable(),
  name: z.string(),
  node_id: z.string(),
  notifications_url: z.string().url(),
  open_issues_count: z.number(),
  open_issues: z.number(),
  owner: ownerSchema,
  private: z.boolean(),
  pulls_url: z.string().url(),
  pushed_at: z.string(),
  releases_url: z.string().url(),
  score: z.number(),
  size: z.number(),
  ssh_url: z.string(),
  stargazers_count: z.number(),
  stargazers_url: z.string().url(),
  statuses_url: z.string().url(),
  subscribers_url: z.string().url(),
  subscription_url: z.string().url(),
  svn_url: z.string().url(),
  tags_url: z.string().url(),
  teams_url: z.string().url(),
  topics: z.array(z.string()),
  trees_url: z.string().url(),
  updated_at: z.string(),
  url: z.string().url(),
  visibility: z.string(),
  watchers_count: z.number(),
  watchers: z.number(),
  web_commit_signoff_required: z.boolean(),
});

export type Repository = z.infer<typeof repositorySchema>;